import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.sql.DriverManager;
import java.util.List;
import java.util.concurrent.TimeUnit;


public class Selenium_41_zadanie {
    WebDriver driver;
    String URL = "https://fakestore.testelka.pl/metody-na-elementach/";
    WebDriverWait wait;


    @BeforeEach
    public void driverSetup(){
        System.setProperty("webdriver.chrome.driver","src/main/resources/chromedriver.exe");
        driver = new ChromeDriver();
        driver.manage().window().setSize(new Dimension(1300, 800));
        driver.manage().window().setPosition(new Point(4,30));
        driver.manage().timeouts().pageLoadTimeout(20, TimeUnit.SECONDS);
        driver.navigate().to(URL);
        wait = new WebDriverWait(driver, 10);

    }

    @AfterEach
    public void driverQuit() {
        driver.close();
        driver.quit();
    }

    @Test
    public void checkElementsTest() {
        WebElement stronaGlowna = driver.findElement(By.cssSelector("input[value='Strona główna']"));
        WebElement zeglarstwo = driver.findElement(By.cssSelector("a[value='żeglarstwo']"));
        WebElement wspinaczka = driver.findElement(By.cssSelector("a[value='wspinaczka']"));
        WebElement windsurfing = driver.findElement(By.cssSelector("a[value='windsurfing']"));
        WebElement yogaIPilates = driver.findElement(By.cssSelector("a[value='yoga']"));
        List<WebElement> yellowButton = driver.findElements(By.cssSelector("a.button"));
        WebElement checkbox1 = driver.findElement(By.cssSelector("input[name='selected-checkbox']"));
        WebElement radioButton1 = driver.findElement(By.cssSelector("input[name='selected-radio']"));
        WebElement checkbox2 = driver.findElement(By.cssSelector("input[name='not-selected-checkbox']"));
        WebElement radioButton2 = driver.findElement(By.cssSelector("input[name='not-selected-radio']"));
        List<WebElement> allRadioButton = driver.findElements(By.cssSelector("*.button"));


        Assertions.assertAll("Checking of all emleements",
                () -> Assertions.assertFalse(stronaGlowna.isEnabled(), "Button is active"),
                () -> Assertions.assertTrue(!zeglarstwo.isDisplayed(), "Button is not displayed"),
                () -> assertAllButtonAreYellow(yellowButton),
                () -> Assertions.assertTrue(checkbox1.isSelected()),
                () -> Assertions.assertTrue(radioButton1.isSelected()),
                () -> Assertions.assertFalse(checkbox2.isSelected()),
                () -> Assertions.assertFalse(radioButton2.isSelected()),
                () -> assertAllButtonsHaveSameTag(allRadioButton)
        );
    }
        public void assertAllButtonAreYellow(List<WebElement> buttons){
            for (WebElement button:buttons) {
                String color = button.getCssValue("background-color");
                Assertions.assertEquals("rgba(245, 233, 101, 1)", color, "Color is not what expected");
            }
        }
        public void assertAllButtonsHaveSameTag(List<WebElement> buttons){
            for (WebElement button:buttons) {
                Assertions.assertEquals("a",button.getTagName(), "Tag name is not as expected");
            }
        }
}
